// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @map("_id")
  email        String   @unique
  username     String   @unique
  password     String
  name         String
  refreshToken String?  // Lưu refresh token nếu cần
  profilePic   String?  // Ảnh đại diện
  bio          String?  // Tiểu sử
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  followers    Follow[] @relation("followers")
  following    Follow[] @relation("following")
  sentMessages     Message[] @relation("sentMessages")
  receivedMessages Message[] @relation("receivedMessages")
  sentNotifications     Notification[] @relation("sentNotifications")
  receivedNotifications Notification[] @relation("receivedNotifications")

  @@map("users")
}

model Post {
  id        String   @id @default(uuid()) @map("_id")
  imageUrl  String
  caption   String?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  comments  Comment[]
  likes     Like[]
  notifications Notification[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@map("comments")
}

model Like {
  id       String @id @default(uuid()) @map("_id")
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String

  @@unique([userId, postId])
  @@map("likes")
}

model Follow {
  id           String @id @default(uuid()) @map("_id")
  follower     User   @relation("followers", fields: [followerId], references: [id])
  followerId   String
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String

  @@unique([followerId, followingId])
  @@map("follows")
}

model Message {
  id        String   @id @default(uuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("sentMessages", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("receivedMessages", fields: [receiverId], references: [id])
  receiverId String

  @@map("messages")
}

model Notification {
  id         String   @id @default(uuid()) @map("_id")
  type       String   // e.g., LIKE, COMMENT, FOLLOW, MESSAGE
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  recipient  User     @relation("receivedNotifications", fields: [recipientId], references: [id])
  recipientId String

  sender     User?    @relation("sentNotifications", fields: [senderId], references: [id])
  senderId   String?

  post       Post?    @relation(fields: [postId], references: [id])
  postId     String?

  @@map("notifications")
}
