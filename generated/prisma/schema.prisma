generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  TRIP_INVITE
  MESSAGE
}

enum DestinationCategory {
  BEACH
  MOUNTAIN
  CITY
  HISTORICAL
  NATURE
  ADVENTURE
  CULTURAL
  RELIGIOUS
  ENTERTAINMENT
  FOOD
  HOTEL
  RESTAURANT
  SHOPPING
  MUSEUM
  PARK
  TEMPLE
  LAKE
  WATERFALL
  RESORT
  STREET_FOOD
}

enum PriceRange {
  FREE
  BUDGET // < 100k VND
  MODERATE // 100k - 500k VND
  EXPENSIVE // 500k - 1M VND
  LUXURY // > 1M VND
}

enum DestinationStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
  REPORTED
}

enum HomestayType {
  ENTIRE_PLACE // Toàn bộ căn nhà
  PRIVATE_ROOM // Phòng riêng
  SHARED_ROOM // Phòng chung
}

enum HomestayStatus {
  ACTIVE
  AVAILABLE
  BOOKED
  MAINTENANCE
  INACTIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  email         String    @unique
  username      String    @unique
  password      String
  name          String
  phoneNumber   String?
  profilePic    String?
  bio           String?
  gender        String?
  dob           DateTime?
  address       String?
  verified      Boolean   @default(false)
  lastLogin     DateTime?
  accountStatus Boolean   @default(true)
  private       Boolean   @default(false)
  role          Int
  refreshToken  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deleteAt      DateTime?

  // Existing relations - KHÔNG THAY ĐỔI
  posts                    Post[]                    @relation("UserPosts")
  comments                 Comment[]
  likes                    Like[]
  savedPosts               SavedPost[]
  notificationsSent        Notification[]            @relation("SenderNoti")
  notificationsRecv        Notification[]            @relation("ReceiverNoti")
  trips                    Trip[]
  reports                  Report[]                  @relation("Reporter")
  followers                Follow[]                  @relation("FollowerRelation")
  following                Follow[]                  @relation("FollowingRelation")
  taggedInPosts            PostTag[]
  sharedPostsSent          SharedPost[]              @relation("SharedPostsSender")
  sharedPostsReceived      SharedPost[]              @relation("SharedPostsRecipient")
  stories                  Story[]
  conversationsCreated     Conversation[]            @relation("ConversationCreatedBy")
  conversationParticipants ConversationParticipant[]
  messageReactions         MessageReaction[]
  sentMessages             Message[]                 @relation("MessageSender")

  // NEW: Destination relations - CHỈ THÊM MỚI
  destinations         Destination[]
  destinationFavorites DestinationFavorite[]
  destinationReviews   DestinationReview[]
  reviewHelpful        ReviewHelpful[]
  destinationCheckins  DestinationCheckin[]
  uploadedImages       DestinationImage[]

  // NEW: Homestay relations - CHỈ THÊM MỚI
  hostedHomestays   Homestay[]         @relation("HomestayHost")
  homestayBookings  HomestayBooking[]  @relation("BookingGuest")
  homestayReviews   HomestayReview[]
  homestayFavorites HomestayFavorite[]

  @@map("users")
}

model Follow {
  id           String   @id @default(uuid()) @map("_id")
  followerId   String
  followingId  String
  followStatus String
  createdAt    DateTime @default(now())

  follower  User @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id            String   @id @default(uuid()) @map("_id")
  authorId      String
  imageUrl      String[]
  caption       String?
  location      String?
  destinationId String? // Tag địa điểm du lịch
  tags          String[]
  isPublic      Boolean  @default(true)
  likeCount     Int      @default(0)
  commentCount  Int      @default(0)
  sharedCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  author        User           @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  destination   Destination?   @relation(fields: [destinationId], references: [id])
  taggedUsers   PostTag[]
  sharedPosts   SharedPost[]
  comments      Comment[]
  savedBy       SavedPost[]
  notifications Notification[]

  likes Like[] @relation("PostLikes")

  @@map("posts")
}

model SharedPost {
  id          String   @id @default(uuid()) @map("_id")
  senderId    String
  recipientId String?
  storyId     String?
  tripId      String?
  postId      String
  message     String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender        User           @relation("SharedPostsSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient     User?          @relation("SharedPostsRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  story         Story?         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  trip          Trip?          @relation(fields: [tripId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@map("shared_posts")
}

model PostTag {
  id        String   @id @default(uuid()) @map("_id")
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  postId    String
  authorId  String
  content   String
  parentId  String?
  likeCount Int      @default(0)
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReply", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("CommentReply")
  likes   Like[]    @relation("CommentLikes")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  targetId  String
  type      String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation("PostLikes", fields: [targetId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentLikes", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([userId, targetId, type])
  @@map("likes")
}

model SavedPost {
  id      String   @id @default(uuid()) @map("_id")
  userId  String
  postId  String
  savedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("saved_posts")
}

model Message {
  id             String   @id @default(uuid()) @map("_id")
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedForAll  Boolean  @default(false)
  seenBy         String[] @default([])
  mediaUrls      String[] @default([])
  mediaType      String?
  pinned         Boolean  @default(false)

  conversation Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User              @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  reactions    MessageReaction[]

  @@map("messages")
}

model Destination {
  id          String              @id @default(cuid()) @map("_id")
  name        String
  description String?
  shortDesc   String? // Mô tả ngắn cho preview
  address     String
  city        String
  country     String
  latitude    Float?
  longitude   Float?
  category    DestinationCategory
  subCategory String? // Phân loại con, VD: "Beach Resort", "Street Food Market"

  // Thông tin hình ảnh
  images     DestinationImage[] // Danh sách ảnh với metadata
  coverImage String? // Ảnh bìa chính

  // Thông tin liên hệ và web
  website String?
  phone   String?
  email   String?

  // Thông tin hoạt động
  openingHours    Json? // Lưu giờ mở cửa theo từng ngày
  bestTimeToVisit String? // VD: "6am-8am, 5pm-7pm"

  // Thông tin giá cả
  priceRange PriceRange @default(FREE)
  avgCost    Float? // Chi phí trung bình
  currency   String?    @default("VND")

  // Đánh giá và thống kê
  rating      Float? @default(0)
  reviewCount Int    @default(0)
  visitCount  Int    @default(0)
  shareCount  Int    @default(0)

  // Trạng thái và quyền
  status     DestinationStatus @default(PENDING_APPROVAL)
  isVerified Boolean           @default(false) // Xác minh bởi admin
  isPublic   Boolean           @default(true)

  // Tags và tìm kiếm
  tags      String[] // Tags để tìm kiếm: ["romantic", "family-friendly", "instagram-worthy"]
  amenities String[] // Tiện nghi: ["wifi", "parking", "wheelchair-accessible"]

  // Thông tin người tạo
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy User                  @relation(fields: [createdById], references: [id])
  favorites DestinationFavorite[]
  reviews   DestinationReview[]
  checkins  DestinationCheckin[]
  trips     TripDestination[] // Many-to-many với Trip
  posts     Post[] // Posts được tag tại địa điểm này

  @@map("destinations")
}

model DestinationImage {
  id            String   @id @default(cuid()) @map("_id")
  destinationId String
  url           String // URL của ảnh
  caption       String? // Mô tả ảnh
  uploadedById  String // Người upload ảnh
  isMain        Boolean  @default(false) // Ảnh chính
  order         Int? // Thứ tự hiển thị
  width         Int? // Kích thước ảnh
  height        Int?
  fileSize      Int? // Dung lượng file (bytes)
  createdAt     DateTime @default(now())

  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  uploadedBy  User        @relation(fields: [uploadedById], references: [id])

  @@map("destination_images")
}

model DestinationFavorite {
  id            String   @id @default(cuid()) @map("_id")
  userId        String
  destinationId String
  note          String? // Ghi chú cá nhân
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  destination Destination @relation(fields: [destinationId], references: [id])

  @@unique([userId, destinationId])
  @@map("destination_favorites")
}

model DestinationReview {
  id            String    @id @default(cuid()) @map("_id")
  destinationId String
  userId        String
  rating        Float // 1-5 sao
  title         String?
  content       String
  images        String[] // Ảnh đính kèm trong review
  helpful       Int       @default(0) // Số lượt "helpful"
  isVerified    Boolean   @default(false) // Đã xác minh đã đến thăm
  visitDate     DateTime? // Ngày thăm quan
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  destination  Destination     @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id])
  helpfulUsers ReviewHelpful[] // Users đã vote helpful

  @@unique([userId, destinationId]) // Mỗi user chỉ review 1 lần
  @@map("destination_reviews")
}

model ReviewHelpful {
  id        String   @id @default(cuid()) @map("_id")
  reviewId  String
  userId    String
  createdAt DateTime @default(now())

  review DestinationReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User              @relation(fields: [userId], references: [id])

  @@unique([reviewId, userId])
  @@map("review_helpful")
}

model DestinationCheckin {
  id            String   @id @default(cuid()) @map("_id")
  destinationId String
  userId        String
  message       String? // Message khi checkin
  images        String[] // Ảnh checkin
  isPublic      Boolean  @default(true)
  createdAt     DateTime @default(now())

  destination Destination @relation(fields: [destinationId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("destination_checkins")
}

model TripDestination {
  id            String    @id @default(cuid()) @map("_id")
  tripId        String
  destinationId String
  visitDate     DateTime?
  duration      Int? // Thời gian ở lại (phút)
  cost          Float? // Chi phí tại địa điểm này
  notes         String? // Ghi chú cá nhân
  order         Int? // Thứ tự trong hành trình
  createdAt     DateTime  @default(now())

  trip        Trip        @relation(fields: [tripId], references: [id], onDelete: Cascade)
  destination Destination @relation(fields: [destinationId], references: [id])

  @@unique([tripId, destinationId])
  @@map("trip_destinations")
}

model MessageReaction {
  id        String @id @default(uuid()) @map("_id")
  userId    String
  messageId String
  reaction  String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId], name: "message_user_unique")
  @@map("message_reactions")
}

model Conversation {
  id          String   @id @default(uuid()) @map("_id")
  isGroup     Boolean  @default(false)
  name        String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy    User                      @relation("ConversationCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(uuid()) @map("_id")
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Notification {
  id           String           @id @default(uuid()) @map("_id")
  type         NotificationType
  message      String
  isRead       Boolean          @default(false)
  senderId     String?
  recipientId  String
  postId       String?
  sharedPostId String?
  data         Json?
  createdAt    DateTime         @default(now())

  sender     User?       @relation("SenderNoti", fields: [senderId], references: [id], onDelete: Cascade)
  recipient  User        @relation("ReceiverNoti", fields: [recipientId], references: [id], onDelete: Cascade)
  post       Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  sharedPost SharedPost? @relation(fields: [sharedPostId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Trip {
  id            String   @id @default(uuid()) @map("_id")
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  cost          Json?
  placesVisited String[]
  tags          String[]
  homestay      String?
  participants  String[]
  privacy       String
  userId        String
  imageUrl      String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  destinations TripDestination[] // NEW: Many-to-many với Destination
  sharedPosts  SharedPost[]
}

model Story {
  id        String    @id @default(uuid()) @map("_id")
  userId    String
  content   String?
  mediaUrls String[]
  mediaType MediaType
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedPosts SharedPost[]
}

enum MediaType {
  IMAGE
  VIDEO
}

model Homestay {
  id          String  @id @default(cuid()) @map("_id")
  title       String
  description String
  shortDesc   String? // Mô tả ngắn
  address     String
  city        String
  country     String
  latitude    Float?
  longitude   Float?

  // Thông tin homestay
  type      HomestayType
  maxGuests Int
  bedrooms  Int
  bathrooms Int
  beds      Int

  // Giá cả
  pricePerNight Float
  currency      String @default("VND")
  cleaningFee   Float?
  serviceFee    Float?

  // Thông tin liên hệ
  phone   String?
  email   String?
  website String?

  // Tiện nghi và quy định
  amenities          String[] // ["wifi", "kitchen", "parking", "pool"]
  houseRules         String[] // ["no-smoking", "no-pets", "quiet-hours"]
  checkInTime        String? // "15:00"
  checkOutTime       String? // "11:00"
  minStay            Int?     @default(1)
  maxStay            Int?
  instantBook        Boolean  @default(false)
  cancellationPolicy String?

  // Hình ảnh
  images     HomestayImage[]
  coverImage String?

  // Đánh giá và thống kê
  rating       Float? @default(0)
  reviewCount  Int    @default(0)
  bookingCount Int    @default(0)
  viewCount    Int    @default(0)

  // Trạng thái
  status     HomestayStatus @default(ACTIVE)
  isVerified Boolean        @default(false)
  isActive   Boolean        @default(true)

  // Thông tin chủ nhà
  hostId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  host      User               @relation("HomestayHost", fields: [hostId], references: [id])
  bookings  HomestayBooking[]
  reviews   HomestayReview[]
  favorites HomestayFavorite[]

  @@map("homestays")
}

model HomestayImage {
  id         String   @id @default(cuid()) @map("_id")
  homestayId String
  url        String
  caption    String?
  isMain     Boolean  @default(false)
  order      Int?
  createdAt  DateTime @default(now())

  homestay Homestay @relation(fields: [homestayId], references: [id], onDelete: Cascade)

  @@map("homestay_images")
}

model HomestayBooking {
  id           String   @id @default(cuid()) @map("_id")
  homestayId   String
  guestId      String
  checkInDate  DateTime
  checkOutDate DateTime
  guests       Int
  totalNights  Int

  // Thông tin giá
  pricePerNight Float
  totalPrice    Float
  cleaningFee   Float?
  serviceFee    Float?
  finalPrice    Float? // Tổng tiền cuối cùng
  currency      String @default("VND")

  // Thông tin đặt phòng
  guestName       String
  guestPhone      String
  guestEmail      String
  specialRequests String? // Yêu cầu đặc biệt
  paymentMethod   String?

  // Trạng thái
  status        BookingStatus @default(PENDING)
  paymentStatus String? // "pending", "paid", "refunded"

  // Thời gian
  bookedAt    DateTime  @default(now())
  confirmedAt DateTime?
  cancelledAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  homestay Homestay @relation(fields: [homestayId], references: [id])
  guest    User     @relation("BookingGuest", fields: [guestId], references: [id])

  @@map("homestay_bookings")
}

model HomestayReview {
  id         String  @id @default(cuid()) @map("_id")
  homestayId String
  userId     String
  bookingId  String? // Liên kết với booking nếu có

  // Đánh giá chi tiết
  overallRating  Float // 1-5 sao tổng thể
  cleanRating    Float? // Độ sạch sẽ
  locationRating Float? // Vị trí
  serviceRating  Float? // Dịch vụ
  valueRating    Float? // Giá trị tiền
  amenityRating  Float? // Tiện nghi

  // Nội dung
  title      String?
  comment    String
  images     String[] // Ảnh đính kèm
  tripType   String? // Loại chuyến đi
  stayPeriod String? // Thời gian ở

  // Thống kê
  helpful Int @default(0)

  // Thời gian
  stayDate  DateTime? // Ngày ở
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  homestay Homestay @relation(fields: [homestayId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, homestayId]) // Mỗi user chỉ review 1 lần
  @@map("homestay_reviews")
}

model HomestayFavorite {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  homestayId String
  note       String? // Ghi chú cá nhân
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  homestay Homestay @relation(fields: [homestayId], references: [id])

  @@unique([userId, homestayId])
  @@map("homestay_favorites")
}

model Report {
  id         String   @id @default(uuid()) @map("_id")
  reporterId String
  targetType String
  targetId   String
  reason     String
  createdAt  DateTime @default(now())

  reporter User @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}
