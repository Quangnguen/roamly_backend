generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MESSAGE
  TAG
  TRIP_SHARED
  SYSTEM
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  email         String    @unique
  username      String    @unique
  password      String
  name          String
  phoneNumber   String?
  profilePic    String?
  bio           String?
  gender        String?
  dob           DateTime?
  address       String?
  verified      Boolean   @default(false)
  lastLogin     DateTime?
  accountStatus Boolean   @default(true)
  private       Boolean   @default(false)
  role          Int
  refreshToken  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deleteAt      DateTime?

  posts                    Post[]                    @relation("UserPosts")
  comments                 Comment[]
  likes                    Like[]
  savedPosts               SavedPost[]
  notificationsSent        Notification[]            @relation("SenderNoti")
  notificationsRecv        Notification[]            @relation("ReceiverNoti")
  trips                    Trip[]
  reports                  Report[]                  @relation("Reporter")
  followers                Follow[]                  @relation("FollowerRelation")
  following                Follow[]                  @relation("FollowingRelation")
  taggedInPosts            PostTag[]
  sharedPostsSent          SharedPost[]              @relation("SharedPostsSender")
  sharedPostsReceived      SharedPost[]              @relation("SharedPostsRecipient")
  stories                  Story[]
  conversationsCreated     Conversation[]            @relation("ConversationCreatedBy")
  conversationParticipants ConversationParticipant[]
  messageReactions         MessageReaction[]
  sentMessages             Message[]
  destinations             Destination[]             @relation("UserDestinations")
  destinationReviews       DestinationReview[]       @relation("DestinationReviews")
  destinationViews         DestinationView[]         @relation("UserDestinationViews")

  @@map("users")
}

model Follow {
  id           String   @id @default(uuid()) @map("_id")
  followerId   String
  followingId  String
  followStatus String
  createdAt    DateTime @default(now())

  follower  User @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id           String   @id @default(uuid()) @map("_id")
  authorId     String
  imageUrl     String[]
  caption      String?
  location     String?
  tags         String[]
  isPublic     Boolean  @default(true)
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  sharedCount  Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author             User              @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  taggedUsers        PostTag[]
  taggedDestinations PostDestination[]
  sharedPosts        SharedPost[]
  comments           Comment[]
  savedBy            SavedPost[]
  notifications      Notification[]

  likes Like[] @relation("PostLikes")

  @@map("posts")
}

model SharedPost {
  id          String   @id @default(uuid()) @map("_id")
  senderId    String
  recipientId String?
  storyId     String?
  tripId      String?
  postId      String
  message     String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender        User           @relation("SharedPostsSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient     User?          @relation("SharedPostsRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  story         Story?         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  trip          Trip?          @relation(fields: [tripId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@map("shared_posts")
}

model PostTag {
  id        String   @id @default(uuid()) @map("_id")
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_tags")
}

model PostDestination {
  id            String   @id @default(uuid()) @map("_id")
  postId        String
  destinationId String
  createdAt     DateTime @default(now())

  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  destination Destination @relation("PostDestinations", fields: [destinationId], references: [id], onDelete: Cascade)

  @@unique([postId, destinationId])
  @@map("post_destinations")
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  postId    String
  authorId  String
  content   String
  parentId  String?
  likeCount Int      @default(0)
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReply", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("CommentReply")
  likes   Like[]    @relation("CommentLikes")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  targetId  String
  type      String
  createdAt DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post?        @relation("PostLikes", fields: [targetId], references: [id], onDelete: Cascade)
  comment     Comment?     @relation("CommentLikes", fields: [targetId], references: [id], onDelete: Cascade)
  destination Destination? @relation("DestinationLikes", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([userId, targetId, type])
  @@map("likes")
}

model SavedPost {
  id      String   @id @default(uuid()) @map("_id")
  userId  String
  postId  String
  savedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("saved_posts")
}

model Message {
  id             String   @id @default(uuid()) @map("_id")
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedForAll  Boolean  @default(false)
  seenBy         String[] @default([])
  mediaUrls      String[] @default([])
  mediaType      String?
  pinned         Boolean  @default(false)

  conversation Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User              @relation(fields: [senderId], references: [id], onDelete: Cascade)
  reactions    MessageReaction[]

  @@map("messages")
}

model MessageReaction {
  id        String @id @default(uuid()) @map("_id")
  userId    String
  messageId String
  reaction  String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId], name: "message_user_unique")
  @@map("message_reactions")
}

model Conversation {
  id          String   @id @default(uuid()) @map("_id")
  isGroup     Boolean  @default(false)
  name        String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy    User                      @relation("ConversationCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(uuid()) @map("_id")
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Notification {
  id           String           @id @default(uuid()) @map("_id")
  type         NotificationType
  message      String
  isRead       Boolean          @default(false)
  senderId     String?
  recipientId  String
  postId       String?
  sharedPostId String?
  data         Json?
  createdAt    DateTime         @default(now())

  sender     User?       @relation("SenderNoti", fields: [senderId], references: [id], onDelete: Cascade)
  recipient  User        @relation("ReceiverNoti", fields: [recipientId], references: [id], onDelete: Cascade)
  post       Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  sharedPost SharedPost? @relation(fields: [sharedPostId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Trip {
  id            String   @id @default(uuid()) @map("_id")
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  cost          Json?
  placesVisited String[]
  tags          String[]
  homestay      String?
  participants  String[]
  privacy       String
  userId        String
  imageUrl      String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedPosts SharedPost[]
}

model Story {
  id        String    @id @default(uuid()) @map("_id")
  userId    String
  content   String?
  mediaUrls String[]
  mediaType MediaType
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedPosts SharedPost[]
}

enum MediaType {
  IMAGE
  VIDEO
}

model Report {
  id         String   @id @default(uuid()) @map("_id")
  reporterId String
  targetType String
  targetId   String
  reason     String
  createdAt  DateTime @default(now())

  reporter User @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Destination {
  id              String   @id @default(uuid()) @map("_id")
  title           String
  description     String?
  location        String
  city            String
  country         String
  latitude        Float?
  longitude       Float?
  category        String[] @default([])
  imageUrl        String[] @default([])
  tags            String[] @default([])
  visitCount      Int      @default(0)
  likeCount       Int      @default(0)
  reviewCount     Int      @default(0)
  rating          Float    @default(0)
  bestTimeToVisit String?
  entryFee        Json?
  openingHours    String?
  facilities      String[] @default([])
  activities      String[] @default([])
  travelTips      String[] @default([])
  isPublic        Boolean  @default(true)
  parentId        String?
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User                @relation("UserDestinations", fields: [userId], references: [id], onDelete: Cascade)
  parent        Destination?        @relation("DestinationHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subLocations  Destination[]       @relation("DestinationHierarchy")
  likes         Like[]              @relation("DestinationLikes")
  reviews       DestinationReview[]
  taggedInPosts PostDestination[]   @relation("PostDestinations")
  views         DestinationView[]   @relation("DestinationViews")

  @@map("destinations")
}

model DestinationView {
  id            String   @id @default(uuid()) @map("_id")
  destinationId String
  userId        String
  viewedAt      DateTime @default(now())

  destination Destination @relation("DestinationViews", fields: [destinationId], references: [id], onDelete: Cascade)
  user        User        @relation("UserDestinationViews", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([destinationId, userId])
  @@index([destinationId])
  @@map("destination_views")
}

model DestinationReview {
  id            String    @id @default(uuid()) @map("_id")
  destinationId String
  userId        String
  rating        Float
  comment       String?
  imageUrl      String[]  @default([])
  visitDate     DateTime?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  user        User        @relation("DestinationReviews", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([destinationId, userId])
  @@map("destination_reviews")
}
