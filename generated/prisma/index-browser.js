
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  name: 'name',
  phoneNumber: 'phoneNumber',
  profilePic: 'profilePic',
  bio: 'bio',
  gender: 'gender',
  dob: 'dob',
  address: 'address',
  verified: 'verified',
  lastLogin: 'lastLogin',
  accountStatus: 'accountStatus',
  private: 'private',
  role: 'role',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleteAt: 'deleteAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  followStatus: 'followStatus',
  createdAt: 'createdAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  imageUrl: 'imageUrl',
  caption: 'caption',
  location: 'location',
  destinationId: 'destinationId',
  tags: 'tags',
  isPublic: 'isPublic',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  sharedCount: 'sharedCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SharedPostScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  recipientId: 'recipientId',
  storyId: 'storyId',
  tripId: 'tripId',
  postId: 'postId',
  message: 'message',
  isPublic: 'isPublic',
  createdAt: 'createdAt'
};

exports.Prisma.PostTagScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  parentId: 'parentId',
  likeCount: 'likeCount',
  isEdited: 'isEdited',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetId: 'targetId',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.SavedPostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  savedAt: 'savedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedForAll: 'deletedForAll',
  seenBy: 'seenBy',
  mediaUrls: 'mediaUrls',
  mediaType: 'mediaType',
  pinned: 'pinned'
};

exports.Prisma.DestinationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  shortDesc: 'shortDesc',
  address: 'address',
  city: 'city',
  country: 'country',
  addressId: 'addressId',
  latitude: 'latitude',
  longitude: 'longitude',
  category: 'category',
  subCategory: 'subCategory',
  coverImage: 'coverImage',
  website: 'website',
  phone: 'phone',
  email: 'email',
  openingHours: 'openingHours',
  bestTimeToVisit: 'bestTimeToVisit',
  priceRange: 'priceRange',
  avgCost: 'avgCost',
  currency: 'currency',
  rating: 'rating',
  reviewCount: 'reviewCount',
  visitCount: 'visitCount',
  shareCount: 'shareCount',
  status: 'status',
  isVerified: 'isVerified',
  isPublic: 'isPublic',
  tags: 'tags',
  amenities: 'amenities',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DestinationImageScalarFieldEnum = {
  id: 'id',
  destinationId: 'destinationId',
  url: 'url',
  caption: 'caption',
  uploadedById: 'uploadedById',
  isMain: 'isMain',
  order: 'order',
  width: 'width',
  height: 'height',
  fileSize: 'fileSize',
  createdAt: 'createdAt'
};

exports.Prisma.DestinationFavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  destinationId: 'destinationId',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.DestinationReviewScalarFieldEnum = {
  id: 'id',
  destinationId: 'destinationId',
  userId: 'userId',
  rating: 'rating',
  title: 'title',
  content: 'content',
  images: 'images',
  helpful: 'helpful',
  isVerified: 'isVerified',
  visitDate: 'visitDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewHelpfulScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.DestinationCheckinScalarFieldEnum = {
  id: 'id',
  destinationId: 'destinationId',
  userId: 'userId',
  message: 'message',
  images: 'images',
  isPublic: 'isPublic',
  createdAt: 'createdAt'
};

exports.Prisma.TripDestinationScalarFieldEnum = {
  id: 'id',
  tripId: 'tripId',
  destinationId: 'destinationId',
  visitDate: 'visitDate',
  duration: 'duration',
  cost: 'cost',
  notes: 'notes',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  messageId: 'messageId',
  reaction: 'reaction'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  isGroup: 'isGroup',
  name: 'name',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationParticipantScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  joinedAt: 'joinedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  message: 'message',
  isRead: 'isRead',
  senderId: 'senderId',
  recipientId: 'recipientId',
  postId: 'postId',
  sharedPostId: 'sharedPostId',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.TripScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  cost: 'cost',
  placesVisited: 'placesVisited',
  tags: 'tags',
  homestay: 'homestay',
  participants: 'participants',
  privacy: 'privacy',
  userId: 'userId',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  content: 'content',
  mediaUrls: 'mediaUrls',
  mediaType: 'mediaType',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HomestayScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  shortDesc: 'shortDesc',
  address: 'address',
  city: 'city',
  country: 'country',
  addressId: 'addressId',
  latitude: 'latitude',
  longitude: 'longitude',
  type: 'type',
  maxGuests: 'maxGuests',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  beds: 'beds',
  pricePerNight: 'pricePerNight',
  currency: 'currency',
  cleaningFee: 'cleaningFee',
  serviceFee: 'serviceFee',
  phone: 'phone',
  email: 'email',
  website: 'website',
  amenities: 'amenities',
  houseRules: 'houseRules',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  minStay: 'minStay',
  maxStay: 'maxStay',
  instantBook: 'instantBook',
  cancellationPolicy: 'cancellationPolicy',
  coverImage: 'coverImage',
  rating: 'rating',
  reviewCount: 'reviewCount',
  bookingCount: 'bookingCount',
  viewCount: 'viewCount',
  status: 'status',
  isVerified: 'isVerified',
  isActive: 'isActive',
  hostId: 'hostId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HomestayImageScalarFieldEnum = {
  id: 'id',
  homestayId: 'homestayId',
  url: 'url',
  caption: 'caption',
  isMain: 'isMain',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.HomestayBookingScalarFieldEnum = {
  id: 'id',
  homestayId: 'homestayId',
  guestId: 'guestId',
  checkInDate: 'checkInDate',
  checkOutDate: 'checkOutDate',
  guests: 'guests',
  totalNights: 'totalNights',
  pricePerNight: 'pricePerNight',
  totalPrice: 'totalPrice',
  cleaningFee: 'cleaningFee',
  serviceFee: 'serviceFee',
  finalPrice: 'finalPrice',
  currency: 'currency',
  guestName: 'guestName',
  guestPhone: 'guestPhone',
  guestEmail: 'guestEmail',
  specialRequests: 'specialRequests',
  paymentMethod: 'paymentMethod',
  status: 'status',
  paymentStatus: 'paymentStatus',
  bookedAt: 'bookedAt',
  confirmedAt: 'confirmedAt',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HomestayReviewScalarFieldEnum = {
  id: 'id',
  homestayId: 'homestayId',
  userId: 'userId',
  bookingId: 'bookingId',
  overallRating: 'overallRating',
  cleanRating: 'cleanRating',
  locationRating: 'locationRating',
  serviceRating: 'serviceRating',
  valueRating: 'valueRating',
  amenityRating: 'amenityRating',
  title: 'title',
  comment: 'comment',
  images: 'images',
  tripType: 'tripType',
  stayPeriod: 'stayPeriod',
  helpful: 'helpful',
  stayDate: 'stayDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HomestayFavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  homestayId: 'homestayId',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  name: 'name',
  fullName: 'fullName',
  nameEn: 'nameEn',
  slug: 'slug',
  type: 'type',
  latitude: 'latitude',
  longitude: 'longitude',
  area: 'area',
  population: 'population',
  description: 'description',
  shortDesc: 'shortDesc',
  highlights: 'highlights',
  coverImage: 'coverImage',
  images: 'images',
  bestTimeToVisit: 'bestTimeToVisit',
  climate: 'climate',
  famousFor: 'famousFor',
  parentId: 'parentId',
  level: 'level',
  path: 'path',
  destinationCount: 'destinationCount',
  homestayCount: 'homestayCount',
  viewCount: 'viewCount',
  searchCount: 'searchCount',
  isActive: 'isActive',
  isVerified: 'isVerified',
  isPriority: 'isPriority',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  targetType: 'targetType',
  targetId: 'targetId',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.DestinationCategory = exports.$Enums.DestinationCategory = {
  BEACH: 'BEACH',
  MOUNTAIN: 'MOUNTAIN',
  CITY: 'CITY',
  HISTORICAL: 'HISTORICAL',
  NATURE: 'NATURE',
  ADVENTURE: 'ADVENTURE',
  CULTURAL: 'CULTURAL',
  RELIGIOUS: 'RELIGIOUS',
  ENTERTAINMENT: 'ENTERTAINMENT',
  FOOD: 'FOOD',
  HOTEL: 'HOTEL',
  RESTAURANT: 'RESTAURANT',
  SHOPPING: 'SHOPPING',
  MUSEUM: 'MUSEUM',
  PARK: 'PARK',
  TEMPLE: 'TEMPLE',
  LAKE: 'LAKE',
  WATERFALL: 'WATERFALL',
  RESORT: 'RESORT',
  STREET_FOOD: 'STREET_FOOD'
};

exports.PriceRange = exports.$Enums.PriceRange = {
  FREE: 'FREE',
  BUDGET: 'BUDGET',
  MODERATE: 'MODERATE',
  EXPENSIVE: 'EXPENSIVE',
  LUXURY: 'LUXURY'
};

exports.DestinationStatus = exports.$Enums.DestinationStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  REPORTED: 'REPORTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  LIKE: 'LIKE',
  COMMENT: 'COMMENT',
  FOLLOW: 'FOLLOW',
  TRIP_INVITE: 'TRIP_INVITE',
  MESSAGE: 'MESSAGE'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO'
};

exports.HomestayType = exports.$Enums.HomestayType = {
  ENTIRE_PLACE: 'ENTIRE_PLACE',
  PRIVATE_ROOM: 'PRIVATE_ROOM',
  SHARED_ROOM: 'SHARED_ROOM'
};

exports.HomestayStatus = exports.$Enums.HomestayStatus = {
  ACTIVE: 'ACTIVE',
  AVAILABLE: 'AVAILABLE',
  BOOKED: 'BOOKED',
  MAINTENANCE: 'MAINTENANCE',
  INACTIVE: 'INACTIVE'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  REFUNDED: 'REFUNDED'
};

exports.AddressType = exports.$Enums.AddressType = {
  COUNTRY: 'COUNTRY',
  PROVINCE: 'PROVINCE',
  DISTRICT: 'DISTRICT',
  WARD: 'WARD',
  AREA: 'AREA'
};

exports.Prisma.ModelName = {
  User: 'User',
  Follow: 'Follow',
  Post: 'Post',
  SharedPost: 'SharedPost',
  PostTag: 'PostTag',
  Comment: 'Comment',
  Like: 'Like',
  SavedPost: 'SavedPost',
  Message: 'Message',
  Destination: 'Destination',
  DestinationImage: 'DestinationImage',
  DestinationFavorite: 'DestinationFavorite',
  DestinationReview: 'DestinationReview',
  ReviewHelpful: 'ReviewHelpful',
  DestinationCheckin: 'DestinationCheckin',
  TripDestination: 'TripDestination',
  MessageReaction: 'MessageReaction',
  Conversation: 'Conversation',
  ConversationParticipant: 'ConversationParticipant',
  Notification: 'Notification',
  Trip: 'Trip',
  Story: 'Story',
  Homestay: 'Homestay',
  HomestayImage: 'HomestayImage',
  HomestayBooking: 'HomestayBooking',
  HomestayReview: 'HomestayReview',
  HomestayFavorite: 'HomestayFavorite',
  Address: 'Address',
  Report: 'Report'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
