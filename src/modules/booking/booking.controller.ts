import {
  Controller,
  Post,
  Get,
  Patch,
  Delete,
  Body,
  Param,
  Query,
  Req,
  UseGuards,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
  ApiQuery,
} from '@nestjs/swagger';
import { BookingService } from './booking.service';
import { CreateBookingDto } from './dto/create-booking.dto';
import { UpdateBookingDto } from './dto/update-booking.dto';
import { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';
import { RolesGuard } from '../../common/guard/roles.guard';
import { Roles } from '../../common/decorators/roles.decorator';
import { Role } from '../../common/enums/role.enum';

@ApiTags('üè† Bookings')
@Controller('bookings')
@UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth()
export class BookingController {
  constructor(private readonly bookingService: BookingService) {}

  @Post()
  @ApiOperation({
    summary: 'T·∫°o booking m·ªõi',
    description:
      'ƒê·∫∑t homestay cho kho·∫£ng th·ªùi gian c·ª• th·ªÉ. H·ªá th·ªëng t·ª± ƒë·ªông ki·ªÉm tra availability v√† t√≠nh t·ªïng gi√°.',
  })
  @ApiResponse({ status: 201, description: 'T·∫°o booking th√†nh c√¥ng' })
  @ApiResponse({
    status: 400,
    description: 'Homestay ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ho·∫∑c th√¥ng tin kh√¥ng h·ª£p l·ªá',
  })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y homestay' })
  @Roles(Role.User, Role.Admin)
  async create(@Req() req: any, @Body() dto: CreateBookingDto) {
    const guestId = req.user.id;
    return this.bookingService.createBooking(guestId, dto);
  }

  @Get('my-bookings')
  @ApiOperation({
    summary: 'L·∫•y danh s√°ch bookings c·ªßa t√¥i',
    description:
      'L·∫•y t·∫•t c·∫£ bookings m√† user ƒë√£ t·∫°o, c√≥ th·ªÉ filter theo status',
  })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['pending', 'confirmed', 'cancelled', 'completed'],
  })
  @ApiResponse({ status: 200, description: 'Danh s√°ch bookings' })
  @Roles(Role.User, Role.Admin)
  async getMyBookings(@Req() req: any, @Query('status') status?: string) {
    const userId = req.user.id;
    return this.bookingService.getMyBookings(userId, status);
  }

  @Get('homestay/:homestayId')
  @ApiOperation({
    summary: 'L·∫•y bookings theo homestay (owner only)',
    description: 'Ch·ªß homestay xem t·∫•t c·∫£ bookings cho homestay c·ªßa m√¨nh',
  })
  @ApiParam({ name: 'homestayId', description: 'ID c·ªßa homestay' })
  @ApiQuery({
    name: 'status',
    required: false,
    enum: ['pending', 'confirmed', 'cancelled', 'completed'],
  })
  @ApiResponse({ status: 200, description: 'Danh s√°ch bookings c·ªßa homestay' })
  @ApiResponse({ status: 403, description: 'B·∫°n kh√¥ng ph·∫£i ch·ªß homestay' })
  @Roles(Role.User, Role.Admin)
  async getByHomestay(
    @Param('homestayId') homestayId: string,
    @Req() req: any,
    @Query('status') status?: string,
  ) {
    const ownerId = req.user.id;
    return this.bookingService.getBookingsByHomestay(
      homestayId,
      ownerId,
      status,
    );
  }

  @Get(':id')
  @ApiOperation({
    summary: 'L·∫•y chi ti·∫øt booking',
    description: 'Ch·ªâ guest ho·∫∑c owner c√≥ th·ªÉ xem chi ti·∫øt booking',
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa booking' })
  @ApiResponse({ status: 200, description: 'Th√¥ng tin chi ti·∫øt booking' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem booking n√†y' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y booking' })
  @Roles(Role.User, Role.Admin)
  async getById(@Param('id') id: string, @Req() req: any) {
    const userId = req.user.id;
    return this.bookingService.getBookingById(id, userId);
  }

  @Patch(':id')
  @ApiOperation({
    summary: 'C·∫≠p nh·∫≠t booking',
    description:
      'Guest c√≥ th·ªÉ update th√¥ng tin booking (n·∫øu pending). Owner c√≥ th·ªÉ update status (confirm/cancel/complete).',
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa booking' })
  @ApiResponse({ status: 200, description: 'C·∫≠p nh·∫≠t booking th√†nh c√¥ng' })
  @ApiResponse({
    status: 400,
    description: 'Th√¥ng tin kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ c·∫≠p nh·∫≠t',
  })
  @ApiResponse({
    status: 403,
    description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t booking n√†y',
  })
  @Roles(Role.User, Role.Admin)
  async update(
    @Param('id') id: string,
    @Req() req: any,
    @Body() dto: UpdateBookingDto,
  ) {
    const userId = req.user.id;
    return this.bookingService.updateBooking(id, userId, dto);
  }

  @Patch(':id/cancel')
  @ApiOperation({
    summary: 'H·ªßy booking',
    description: 'Guest ho·∫∑c owner c√≥ th·ªÉ h·ªßy booking',
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa booking' })
  @ApiResponse({ status: 200, description: 'H·ªßy booking th√†nh c√¥ng' })
  @ApiResponse({
    status: 400,
    description: 'Booking ƒë√£ ƒë∆∞·ª£c h·ªßy ho·∫∑c ƒë√£ ho√†n th√†nh',
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn h·ªßy booking n√†y' })
  @Roles(Role.User, Role.Admin)
  async cancel(@Param('id') id: string, @Req() req: any) {
    const userId = req.user.id;
    return this.bookingService.cancelBooking(id, userId);
  }

  @Delete(':id')
  @ApiOperation({
    summary: 'X√≥a booking',
    description: 'Guest c√≥ th·ªÉ x√≥a booking ƒë√£ h·ªßy c·ªßa m√¨nh',
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa booking' })
  @ApiResponse({ status: 200, description: 'X√≥a booking th√†nh c√¥ng' })
  @ApiResponse({ status: 400, description: 'Ch·ªâ c√≥ th·ªÉ x√≥a booking ƒë√£ h·ªßy' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a booking n√†y' })
  @Roles(Role.User, Role.Admin)
  async remove(@Param('id') id: string, @Req() req: any) {
    const userId = req.user.id;
    return this.bookingService.deleteBooking(id, userId);
  }
}
