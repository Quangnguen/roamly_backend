import {
  Injectable,
  NotFoundException,
  ForbiddenException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { NotificationService } from '../notification/notification.service';
import { SocketGateway } from '../socket/socket.gateway';
import { response } from '../../common/utils/response.utils';
import { NotificationType } from '../../../generated/prisma';

@Injectable()
export class LikeService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly notificationService: NotificationService,
    private readonly socketGateway: SocketGateway,
  ) {}

  async like(userId: string, targetId: string, type: string) {
    if (!userId || !targetId || !type) {
      throw new ForbiddenException('Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt');
    }

    const existing = await this.prisma.like.findUnique({
      where: { userId_targetId_type: { userId, targetId, type } },
    });

    if (existing) {
      return response('ƒê√£ th√≠ch tr∆∞·ªõc ƒë√≥', 200, 'success', existing);
    }

    const like = await this.prisma.like.create({
      data: { userId, targetId, type },
    });

    if (type === 'post') {
      const post = await this.prisma.post.findUnique({
        where: { id: targetId },
      });

      if (post && post.authorId !== userId) {
        await this.prisma.post.update({
          where: { id: targetId },
          data: { likeCount: { increment: 1 } },
        });
        // üîî G·ª≠i th√¥ng b√°o v√† realtime t·ªõi ch·ªß post
        await this.notificationService.createNotification({
          type: NotificationType.LIKE,
          message: 'Ai ƒë√≥ ƒë√£ th√≠ch b√†i vi·∫øt c·ªßa b·∫°n',
          senderId: userId,
          recipientId: post.authorId,
          postId: post.id,
        });

        this.socketGateway.emitToUser(post.authorId, 'post_liked', {
          postId: post.id,
          userId,
        });

        this.socketGateway.emitToUser(post.authorId, 'new_notification', {
          type: NotificationType.LIKE,
          postId: post.id,
        });
      }
    } else if (type === 'comment') {
      const comment = await this.prisma.comment.findUnique({
        where: { id: targetId },
      });

      if (!comment) {
        throw new NotFoundException('Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n');
      }

      // TƒÉng likeCount
      await this.prisma.comment.update({
        where: { id: targetId },
        data: { likeCount: { increment: 1 } },
      });

      // N·∫øu ng∆∞·ªùi like kh√°c t√°c gi·∫£ comment, g·ª≠i th√¥ng b√°o
      if (comment.authorId !== userId) {
        await this.notificationService.createNotification({
          type: NotificationType.LIKE,
          message: 'Ai ƒë√≥ ƒë√£ th√≠ch b√¨nh lu·∫≠n c·ªßa b·∫°n',
          senderId: userId,
          recipientId: comment.authorId,
          data: { commentId: comment.id }, // G·ª≠i th√™m d·ªØ li·ªáu t√πy ch·ªânh n·∫øu mu·ªën
        });

        this.socketGateway.emitToUser(comment.authorId, 'comment_liked', {
          commentId: comment.id,
          userId,
        });

        this.socketGateway.emitToUser(comment.authorId, 'new_notification', {
          type: NotificationType.LIKE,
          commentId: comment.id,
        });
      }
    }

    return response('ƒê√£ y√™u th√≠ch', 201, 'success', like);
  }

  async unlike(userId: string, targetId: string, type: string) {
    const like = await this.prisma.like.findUnique({
      where: { userId_targetId_type: { userId, targetId, type } },
    });

    if (!like) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y l∆∞·ª£t th√≠ch');
    }

    await this.prisma.like.delete({
      where: { userId_targetId_type: { userId, targetId, type } },
    });

    if (type === 'post') {
      const post = await this.prisma.post.findUnique({
        where: { id: targetId },
      });

      if (post) {
        // üîÑ C·∫≠p nh·∫≠t realtime khi unlike
        await this.prisma.post.update({
          where: { id: targetId },
          data: { likeCount: { decrement: 1 } },
        });
        this.socketGateway.emitToUser(post.authorId, 'post_unliked', {
          postId: targetId,
          userId,
        });

        this.socketGateway.emitToUser(userId, 'post_unliked', {
          postId: targetId,
          userId,
        });
      }
    } else if (type === 'comment') {
      const comment = await this.prisma.comment.findUnique({
        where: { id: targetId },
      });

      if (!comment) {
        throw new NotFoundException('Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n');
      }

      // Gi·∫£m likeCount
      await this.prisma.comment.update({
        where: { id: targetId },
        data: { likeCount: { decrement: 1 } },
      });

      // G·ª≠i realtime n·∫øu c·∫ßn
      this.socketGateway.emitToUser(comment.authorId, 'comment_unliked', {
        commentId: targetId,
        userId,
      });

      this.socketGateway.emitToUser(userId, 'comment_unliked', {
        commentId: targetId,
        userId,
      });
    }

    return response('ƒê√£ b·ªè th√≠ch', 200, 'success', null);
  }
}
