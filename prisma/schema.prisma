generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MESSAGE
  TAG
  TRIP_SHARED
  SYSTEM
}

model User {
  id            String   @id @default(uuid()) @map("_id")
  email         String   @unique
  username      String   @unique
  password      String
  name          String
  phoneNumber   String
  profilePic    String?
  bio           String?
  gender        String?
  dob           DateTime?
  address       String?
  verified      Boolean  @default(false)
  lastLogin     DateTime?
  accountStatus Boolean  @default(true)
  private       Boolean  @default(false)
  role          Int
  refreshToken  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deleteAt      DateTime?
  followers     Follow[] @relation("FollowerRelation")  // Người follow mình
  following     Follow[] @relation("FollowingRelation") // Mình follow người khác
  @@map("users")
}

model Follow {
  id          String   @id @default(uuid()) @map("_id")
  followerId  String
  followingId String
  followStatus String   // pending, accepted, blocked
  createdAt   DateTime  @default(now())

  follower    User     @relation("FollowerRelation", fields: [followerId], references: [id])
  following   User     @relation("FollowingRelation", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}


model Post {
  id           String   @id @default(uuid()) @map("_id")
  authorId     String
  imageUrl    String[]
  caption      String?
  location     String?
  tags         String[]       // ví dụ: ["#beach", "#hiking"]
  isPublic     Boolean @default(true)
  likeCount    Int     @default(0)
  commentCount Int     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("posts")
}

model PostTag {
  id      String @id @default(uuid()) @map("_id")
  postId  String
  userId  String // người bị gắn thẻ
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@map("post_tags")
}

model Comment {
  id         String   @id @default(uuid()) @map("_id")
  postId     String
  authorId   String
  content    String
  parentId   String?     // hỗ trợ reply
  likeCount  Int         @default(0)
  isEdited   Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("comments")
}

model Like {
  id       String   @id @default(uuid()) @map("_id")
  userId   String
  targetId String   // có thể là postId hoặc commentId
  type     String   // POST, COMMENT
  createdAt DateTime @default(now())

  @@unique([userId, targetId, type])
  @@map("likes")
}

model SavedPost {
  id      String   @id @default(uuid()) @map("_id")
  userId  String
  postId  String
  savedAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("saved_posts")
}

model Message {
  id         String   @id @default(uuid()) @map("_id")
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("messages")
}

model Notification {
  id           String   @id @default(uuid()) @map("_id")
  type         NotificationType
  message      String
  isRead       Boolean @default(false)
  senderId     String?
  recipientId  String
  postId       String?
  data         Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("notifications")
}

model Trip {
  id            String   @id @default(uuid()) @map("_id")
  userId        String
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  placesVisited String[]        // ["Hà Giang", "Đà Lạt", ...]
  tags          String[]        // #camping, #roadtrip
  participants  String[]        // danh sách userId
  sharedWith    String[]        // userId hoặc group
  isPublic      Boolean  @default(true)
  rating        Float?          // trung bình đánh giá
  photos        Json            // [{ url, description, uploadedAt }]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("trips")
}

model Report {
  id         String   @id @default(uuid()) @map("_id")
  reporterId String
  targetType String   // USER, POST, COMMENT, TRIP
  targetId   String
  reason     String
  createdAt  DateTime @default(now())

  @@map("reports")
}
