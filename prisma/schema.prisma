generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MESSAGE
  TAG
  TRIP_SHARED
  SYSTEM
}

model User {
  id            String     @id @default(uuid()) @map("_id")
  email         String     @unique
  username      String     @unique
  password      String
  name          String
  phoneNumber   String?
  profilePic    String?
  bio           String?
  gender        String?
  dob           DateTime?
  address       String?
  verified      Boolean    @default(false)
  lastLogin     DateTime?
  accountStatus Boolean    @default(true)
  private       Boolean    @default(false)
  role          Int
  refreshToken  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deleteAt      DateTime?

  posts         Post[]     @relation("UserPosts")
  comments      Comment[]
  likes         Like[]
  savedPosts    SavedPost[]
  messagesSent  Message[]  @relation("SentMessages")
  messagesRecv  Message[]  @relation("ReceivedMessages")
  notificationsSent Notification[] @relation("SenderNoti")
  notificationsRecv Notification[] @relation("ReceiverNoti")
  trips         Trip[]
  reports       Report[]   @relation("Reporter")
  followers     Follow[]   @relation("FollowerRelation")
  following     Follow[]   @relation("FollowingRelation")
  taggedInPosts PostTag[]
  sharedPostsSent     SharedPost[] @relation("SharedPostsSender")
  sharedPostsReceived SharedPost[] @relation("SharedPostsRecipient")
  stories        Story[]

  @@map("users")
}

model Follow {
  id          String   @id @default(uuid()) @map("_id")
  followerId  String
  followingId String
  followStatus String
  createdAt   DateTime  @default(now())

  follower    User     @relation("FollowerRelation", fields: [followerId], references: [id])
  following   User     @relation("FollowingRelation", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id           String     @id @default(uuid()) @map("_id")
  authorId     String
  imageUrl     String[]
  caption      String?
  location     String?
  tags         String[]
  isPublic     Boolean    @default(true)
  likeCount    Int        @default(0)
  commentCount Int        @default(0)
  sharedCount  Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  author       User       @relation("UserPosts", fields: [authorId], references: [id])
  taggedUsers  PostTag[]
  sharedPosts  SharedPost[]
  comments     Comment[]
  savedBy      SavedPost[]
  notifications Notification[]

  likes        Like[]     @relation("PostLikes")

  @@map("posts")
}


model SharedPost {
  id           String   @id @default(uuid()) @map("_id")
  senderId     String
  recipientId  String?
  storyId      String?
  tripId       String?
  postId       String
  message      String?
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())

  sender       User     @relation("SharedPostsSender", fields: [senderId], references: [id])
  recipient    User?    @relation("SharedPostsRecipient", fields: [recipientId], references: [id])
  story        Story?   @relation(fields: [storyId], references: [id])
  trip         Trip?    @relation(fields: [tripId], references: [id])
  post         Post     @relation(fields: [postId], references: [id])
  notifications Notification[]

  @@map("shared_posts")
}

model PostTag {
  id        String   @id @default(uuid()) @map("_id")
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_tags")
}

model Comment {
  id         String    @id @default(uuid()) @map("_id")
  postId     String
  authorId   String
  content    String
  parentId   String?
  likeCount  Int        @default(0)
  isEdited   Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("CommentReply", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Comment[] @relation("CommentReply")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  targetId  String
  type      String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  post      Post?    @relation("PostLikes", fields: [targetId], references: [id])

  @@unique([userId, targetId, type])
  @@map("likes")
}


model SavedPost {
  id      String   @id @default(uuid()) @map("_id")
  userId  String
  postId  String
  savedAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("saved_posts")
}

model Message {
  id         String   @id @default(uuid()) @map("_id")
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model Notification {
  id           String           @id @default(uuid()) @map("_id")
  type         NotificationType
  message      String
  isRead       Boolean          @default(false)
  senderId     String?
  recipientId  String
  postId       String?
  sharedPostId String?
  data         Json?
  createdAt    DateTime         @default(now())

  sender       User?            @relation("SenderNoti", fields: [senderId], references: [id])
  recipient    User             @relation("ReceiverNoti", fields: [recipientId], references: [id])
  post         Post?            @relation(fields: [postId], references: [id])
  sharedPost   SharedPost?      @relation(fields: [sharedPostId], references: [id])

  @@map("notifications")
}

model Trip {
  id       String   @id @default(uuid()) @map("_id")
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  cost          Json?
  placesVisited String[]
  tags          String[]
  homestay      String?
  participants  String[]
  privacy       String
  userId        String
  imageUrl      String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user         User @relation(fields: [userId], references: [id])
  sharedPosts  SharedPost[]
}


model Story {
  id          String     @id @default(uuid()) @map("_id")
  userId      String
  content     String?    // caption hoặc text kèm theo
  mediaUrls   String[]   // chứa 1 hoặc nhiều url ảnh/video
  mediaType   MediaType  // ảnh hoặc video
  expiresAt   DateTime   // thời điểm story hết hạn (ví dụ 24h sau tạo)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  sharedPosts SharedPost[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MediaType {
  IMAGE
  VIDEO
}


model Report {
  id         String   @id @default(uuid()) @map("_id")
  reporterId String
  targetType String   // USER, POST, COMMENT, TRIP
  targetId   String
  reason     String
  createdAt  DateTime @default(now())

  reporter   User     @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

