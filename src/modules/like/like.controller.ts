// like.controller.ts
import { Controller, Post, Delete, Body, UseGuards, Req } from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiBody,
} from '@nestjs/swagger';
import { LikeService } from './like.service';
import { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';
import { LikeDto } from './dto/like.dto';

@ApiTags('üëç Likes')
@ApiBearerAuth('JWT-auth')
@Controller('likes')
@UseGuards(JwtAuthGuard)
export class LikeController {
  constructor(private readonly likeService: LikeService) {}

  @Post()
  @ApiOperation({
    summary: 'Like m·ªôt post/comment/destination/homestay',
    description: `
    Th√≠ch m·ªôt ƒë·ªëi t∆∞·ª£ng (post, comment, destination, ho·∫∑c homestay).
    
    **Type values:**
    - \`post\` - Like m·ªôt b√†i vi·∫øt
    - \`comment\` - Like m·ªôt comment
    - \`destination\` - Like m·ªôt ƒë·ªãa ƒëi·ªÉm du l·ªãch
    - \`homestay\` - Like m·ªôt homestay
    
    **UserId:**
    - M·∫∑c ƒë·ªãnh l·∫•y t·ª´ JWT token c·ªßa user ƒëang login
    - C√≥ th·ªÉ truy·ªÅn \`userId\` trong body ƒë·ªÉ override (d√πng cho testing/admin)
    - N·∫øu kh√¥ng truy·ªÅn \`userId\`, s·∫Ω t·ª± ƒë·ªông d√πng user t·ª´ token
    
    **K·∫øt qu·∫£:**
    - TƒÉng likeCount c·ªßa ƒë·ªëi t∆∞·ª£ng
    - T·∫°o notification cho ch·ªß ƒë·ªëi t∆∞·ª£ng (n·∫øu kh√°c ng∆∞·ªùi like)
    - Emit socket event real-time
    `,
  })
  @ApiBody({ type: LikeDto })
  @ApiResponse({
    status: 201,
    description: 'Like th√†nh c√¥ng',
    schema: {
      example: {
        message: 'ƒê√£ th√≠ch b√†i vi·∫øt',
        statusCode: 201,
        status: 'success',
        data: {
          id: 'like-id',
          userId: 'user-id',
          targetId: 'target-id',
          type: 'post',
          createdAt: '2025-10-03T10:00:00.000Z',
        },
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'ƒê√£ like r·ªìi ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
  })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng' })
  async like(@Req() req: any, @Body() body: LikeDto) {
    // Use userId from body if provided (for testing/admin), otherwise use from JWT token
    const userId = body.userId || req.user.id;
    const result = await this.likeService.like(
      userId,
      body.targetId,
      body.type,
    );
    return result;
  }

  @Delete()
  @ApiOperation({
    summary: 'Unlike m·ªôt post/comment/destination/homestay',
    description: `
    B·ªè th√≠ch m·ªôt ƒë·ªëi t∆∞·ª£ng (post, comment, ho·∫∑c destination).
    
    **Type values:**
    - \`post\` - Unlike m·ªôt b√†i vi·∫øt
    - \`comment\` - Unlike m·ªôt comment
    - \`destination\` - Unlike m·ªôt ƒë·ªãa ƒëi·ªÉm du l·ªãch
    
    **UserId:**
    - M·∫∑c ƒë·ªãnh l·∫•y t·ª´ JWT token c·ªßa user ƒëang login
    - C√≥ th·ªÉ truy·ªÅn \`userId\` trong body ƒë·ªÉ override (d√πng cho testing/admin)
    - N·∫øu kh√¥ng truy·ªÅn \`userId\`, s·∫Ω t·ª± ƒë·ªông d√πng user t·ª´ token
    
    **K·∫øt qu·∫£:**
    - Gi·∫£m likeCount c·ªßa ƒë·ªëi t∆∞·ª£ng
    - Emit socket event real-time
    `,
  })
  @ApiBody({ type: LikeDto })
  @ApiResponse({
    status: 200,
    description: 'Unlike th√†nh c√¥ng',
    schema: {
      example: {
        message: 'ƒê√£ b·ªè th√≠ch',
        statusCode: 200,
        status: 'success',
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Ch∆∞a like ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
  })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng' })
  async unlike(@Req() req: any, @Body() body: LikeDto) {
    // Use userId from body if provided (for testing/admin), otherwise use from JWT token
    const userId = body.userId || req.user.id;
    const result = await this.likeService.unlike(
      userId,
      body.targetId,
      body.type,
    );
    return result;
  }
}
